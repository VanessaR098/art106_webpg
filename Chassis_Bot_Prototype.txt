#include <Adafruit_MPU6050.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#include <Wire.h>

#include <Arduino.h>
#include "CarMotorControl.h"

#define VERSION_EXAMPLE "1.0"

/*
 * Pins for direct motor control with PWM and full bridge
 * Pins 9 + 10 are reserved for Servo
 * 2 + 3 are reserved for encoder input
 */
#define PIN_LEFT_MOTOR_FORWARD      8
#define PIN_LEFT_MOTOR_BACKWARD     12
#define PIN_LEFT_MOTOR_PWM          6 // Must be PWM capable

#define PIN_RIGHT_MOTOR_FORWARD     4
#define PIN_RIGHT_MOTOR_BACKWARD   7 // Pin 9 is already reserved for distance servo
#define PIN_RIGHT_MOTOR_PWM         5 // Must be PWM capable


//Car Control
CarMotorControl RobotCarMotorControl;

// 3 Distance Sensors 
// A0 = Distance Sensor 1
// A1 = Distance Sensor 2
// A2 = Distance Sensor 3
const int analogInPin_A0 = A0;
const int analogInPin_A1 = A1;
const int analogInPin_A2 = A2;

// Analog input pin that the potentiometer is attached to
const int analogOutPin = 9; // Analog output pin that the LED is attached to

int sensorValue_A0 = 0;        // value read from the pot
int outputValue_A0 = 0;        // value output to the PWM (analog out)
int sensorValue_A1 = 0;        
int outputValue_A1 = 0;
int sensorValue_A2 = 0;        
int outputValue_A2 = 0;


Adafruit_MPU6050 mpu; //IMU
Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire); //Graphic Display

//Neopixels
#define PIN            11
#define NUMPIXELS      2

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);//ALITOVE 100pcs WS2812B 

// 'smile', 128x32px
const unsigned char smile [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x0f, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xe0, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x1f, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 0x03, 0xff, 0xf8, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x3f, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x80, 0x03, 0xff, 0xfc, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x3f, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xfc, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x0f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xf0, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x03, 0xff, 0xe0, 0x00, 0x1f, 0xf8, 0x00, 0x07, 0xff, 0xc0, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'scared', 128x32px
const unsigned char scared [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xf9, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xf8, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x7f, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xfe, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 
  0xff, 0xff, 0xc7, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0x8f, 0xff, 0xff, 0x1f, 0xf1, 0xff, 0xff, 0x8f, 0xf8, 0xff, 0xff, 0xf1, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0xff, 0xff, 0x1f, 0xe1, 0xff, 0xff, 0x87, 0xf8, 0xff, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
  0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 
  0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x7f, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xfe, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0xff, 0xf0, 0x00, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xf8, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};






void setup() {
  Serial.begin(115200);
  // while (!Serial);
  Serial.println("MPU6050 OLED demo");

  if (!mpu.begin()) {
    Serial.println("Sensor init failed");
    while (1)
      yield();
  }
  Serial.println("Found a MPU-6050 sensor");

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed, loop forever
  }
  display.display();
  delay(500); // Pause for 2 seconds
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setRotation(0);

  mpu.setAccelerometerRange(MPU6050_RANGE_16_G);
  mpu.setGyroRange(MPU6050_RANGE_250_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  Serial.println("");

   pixels.begin(); // This initializes the NeoPixel library.
   pixels.clear(); // reset pixels
  
  
   pixels.setPixelColor(0, pixels.Color(70,70,70));  
   pixels.show();

   delay(50);

   for (int i = 0; i < 4; i++ ) {
    pixels.setPixelColor(0, pixels.Color(0,0,0)); 
        pixels.setPixelColor(1, pixels.Color(0,0,0)); 
   } 
   pixels.show();
  delay(100);


  RobotCarMotorControl.init(PIN_RIGHT_MOTOR_FORWARD, PIN_RIGHT_MOTOR_BACKWARD, PIN_RIGHT_MOTOR_PWM, PIN_LEFT_MOTOR_FORWARD, PIN_LEFT_MOTOR_BACKWARD, PIN_LEFT_MOTOR_PWM);
}

void loop() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  display.clearDisplay();
  display.setCursor(0, 0);

  float ax = a.acceleration.x;
  float ay = a.acceleration.y;
  float az = a.acceleration.z;
  float gx = g.gyro.x;
  float gy = g.gyro.y;
  float gz = g.gyro.z;

  Serial.print("Accelerometer ");
  Serial.print("X: ");
  Serial.print(ax, 1);
  Serial.print(" m/s^2, ");
  Serial.print("Y: ");
  Serial.print(ay, 1);
  Serial.print(" m/s^2, ");
  Serial.print("Z: ");
  Serial.print(az, 1);
  Serial.println(" m/s^2");

//  display.println("Accelerometer - m/s^2");
//  display.print(ax, 1);
//  display.print(", ");
//  display.print(ay, 1);
//  display.print(", ");
//  display.print(az, 1);
//  display.println("");

  Serial.print("Gyroscope ");
  Serial.print("X: ");
  Serial.print(gx, 1);
  Serial.print(" rps, ");
  Serial.print("Y: ");
  Serial.print(gy, 1);
  Serial.print(" rps, ");
  Serial.print("Z: ");
  Serial.print(gz, 1);
  Serial.println(" rps");

//  display.println("Gyroscope - rps");
//  display.print(gx, 1);
//  display.print(", ");
//  display.print(gy, 1);
//  display.print(", ");
//  display.print(gz, 1);
//  display.println("");
//

  


   // read the analog in value:
  sensorValue_A0 = analogRead(analogInPin_A0);
  sensorValue_A1 = analogRead(analogInPin_A1);
  sensorValue_A2 = analogRead(analogInPin_A2);
  // map it to the range of the analog out:
  outputValue_A0 = map(sensorValue_A0, 0, 1023, 0, 255);
  outputValue_A1 = map(sensorValue_A1, 0, 1023, 0, 255);
  outputValue_A2 = map(sensorValue_A2, 0, 1023, 0, 255);
  // change the analog out value:
  analogWrite(analogOutPin, outputValue_A0);
  if (outputValue_A0 >160 && outputValue_A1 <160 && outputValue_A2 <160){
    
    display.drawBitmap(0,0, scared, 128, 32, WHITE);
    display.display();
    
    pixels.setPixelColor(0, pixels.Color(255, 0, 0)); 
    pixels.setPixelColor(1, pixels.Color(255, 0, 0)); 
    pixels.show();   
  
    RobotCarMotorControl.rotateCar(90, TURN_FORWARD, true); //turn left 
  }else if (outputValue_A2 > 160 && outputValue_A0 <160 && outputValue_A1 <160 ){
    display.drawBitmap(0,0, scared, 128, 32, WHITE);
    display.display();
    
    pixels.setPixelColor(0, pixels.Color(255, 0, 0)); 
    pixels.setPixelColor(1, pixels.Color(255, 0, 0)); 
    pixels.show();   
  
    RobotCarMotorControl.rotateCar(-90, TURN_FORWARD, true); //turn right
  }else if (outputValue_A1 > 160 && outputValue_A0 <160 && outputValue_A2 <160 ){
    display.drawBitmap(0,0, scared, 128, 32, WHITE);
    display.display();
    
    pixels.setPixelColor(0, pixels.Color(255, 0, 0)); 
    pixels.setPixelColor(1, pixels.Color(255, 0, 0)); 
    pixels.show();   
  
    RobotCarMotorControl.goDistanceCentimeter(10);
  }else{
    display.drawBitmap(0,0, smile, 128, 32, WHITE);
  display.display();
  delay(50);

  pixels.setPixelColor(0, pixels.Color(ax*10,0,az*10)); 
           pixels.setPixelColor(1, pixels.Color(0,ay*10,az*10)); 
 
   pixels.show();
  }

  float ayc_left = constrain(ay, 0, 6);
  float ayc_right = constrain(ay,-18, 0);
  float axc = constrain(ax, 0, 20);


  if (ayc_left > 5){ 
    Serial.print("left");
    ay = 0;
    RobotCarMotorControl.rotateCar(90, TURN_FORWARD, true); //turn left
  }else if(ayc_right < -15){
    Serial.print("right");
    ay = 0;
    RobotCarMotorControl.rotateCar(-90, TURN_FORWARD, true); //turn right
  }else if (ax > 16){
    Serial.print("forward");
    ax = 0;
    RobotCarMotorControl.goDistanceCentimeter(10);

    
    
  }

}